1) 전처리 단계
2) 컴파일 단계
3) 어셈블 단계
4) 링크 단계

<gcc 에서 자주 사용되는 옵션>

-o 옵션
    gcc -o file file.c || gcc file.c -o file 이라 입력하면 출력파일이 file이라는 이름으로
    생성되어진다. 이를 실행하려면 ./file 이라하면 된다. -o를 생략하면 a.out으로 실행파일이
    생성되어진다.

-E 옵션
    컴파일의 첫 단계인 전처리까지만 실행한 결과를 화면에 출력한다, 파일로는 저장되지 않는다.

-c 옵션
    test.c 파일을 gcc -c test.c 를 입력하면 test.o 라는 오브젝트 파일이 생성되어진다.
    이후 gcc test.o -o test를 하면 test라는 출력파일이 생성되어진다.

    c옵션의 경우 하나의 프로그램을 여러 파일로 분리해 작성한 다음 함께 컴파일 하는
    "분리 컴파일"시 많이 사용된다. 예시로 main.c 와 hi.c 두개의 소스로 구성되어진 프로그램을
    보면

    // main.c
    extern void hi();

    main(){
        hi();
    }
    // hi.c
    #include<stdio.h>

    void hi(){
        printf("Hi\n");
    }

    gcc main.c hi.c -o test 로 분리 컴파일을 할 수 있다.
    다른 방법으로
    gcc -c main.c
    gcc -c hi.c
    gcc main.o hi.o -o test
    와 같이 각 파일 별로 오브젝트 파일을 만들고 나중에 링크하는 것도 가능하다.

-I 옵션
    -I옵션은 c소스가 표준 디렉토리가 아닌 위치에 있는 헤더 파일을 가질 때 그 디렉토리 위치를
    지정해준다. myheader.h 파일ㅇ이 age.c 파일이 있는 디렉토리의 하위 디렉토리인 mydir에 있다
    하자.
    // age.c
    #include<stdio.h>
    #include "myheader.h"
    main(){
        printf("%d\n",AGE);
    }
    // myheader.h
    #define AGE 20

    그냥 gcc age.c를 하면 컴파일 오류가 나기때문에 i옵션을 사용하여 디렉토리 위치를 지정해 주어
    야 한다.

    gcc age.c -Imydir
    ./a.out

<라이브러리 지정 옵션>
라이브러리란 자주 사용되는 유용한 함수에 대한 오브젝트 파일을 모아둔 것으로 함수 목록(index)도
포함된다. 시스템에서 제공하는 라이브러리는 /user/lib 디렉토리에 있고 이름은 lib으로 시작하고
ar명령어에 의해 생성되므로 확장자는 .a이다.

이중에서  libc.a는 표준 라이브러리고 libm.a는 수치 연산 라이브러리다. ar명령어를 사용하면 
libc.a가 어떤 오브젝트 파일로 이루어 졌는지 알 수 있다. 
ar t libc.a  // t 옵션은 .a파일의 내용을 표시해 주는 것이다.

각 함수의 오브젝트 파일을 gcc -c 로 만들고
ar r libmy.a plus.o minus.o // r옵션은 .a파일을 생성
ar s libmy.a // s 옵션은 라이브러리 파일에 목록을 추가

-l 옵션
    표준 라이브러리가 아닌 라이브러리를 사용하고자 할때 그 라이브러리를 지정해준다.
    작업중인 디렉토리에 라이브러리가 있다면 -l만으로도 사용가능하지만 다른 디렉토리에 있다면
    경로를 지정해 주어야 한다.
    ex)
    gcc test1.c -lmy -Lmylib

3) 디버깅 옵션
-g, -ggdb로 디버깅을 할 수 있다.

4) 최적화 옵션
-O 옵션
성능을 개선시키기 위해 코드를 최적화하면 불필요하거나 비효율적인 계산 과정이 효율적 계산 과정으로
대체되어 코드의 크기와 실행 시간을 줄일 수 있다. 대신, 컴파일 시간이 늘고 컴파일 과정에서
메모리 사용량이 늘어나는 단점이 있다.